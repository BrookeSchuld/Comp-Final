import numpy as np
import math
def bethe_bloch(p,mass):
        electron_mass=.511 #MeV
        c=3*10**8
        LAr_density=1.38 #g/cm^3
        K=.307075 #MeE/mol cm^2
        z=1
        LAr_mass=39.948 #g/mol
        LAr_number=18    #atomic number
        I=188*10**(-6)   #MeV (despite what the PDG recommends)
        B=2.0*np.log(10)
        X0=.201
        X1=3.00
        a  = 0.196
        m  = 3.000
        C  = 5.217
        
        beta=p/np.sqrt(p**2+mass**2)
        gamma=1/np.sqrt(1-beta**2)
        Wmax=2*electron_mass*beta**2*gamma**2/(1+2*gamma*electron_mass/c**2/mass+(electron_mass/c**2/mass)**2)
        delta=0
        X = np.log10(beta * gamma)
        if X0<X and X<X1: delta=(B*X+a*np.power(X1-X,m)-C)     
        if X>X1: delta=(B*X-C)
        
        return (K*LAr_density*z**2*LAr_number/LAr_mass/beta**2*(1/2*np.log(2*electron_mass*beta**2*gamma**2*Wmax/I**2)-beta**2-.5*delta))    #return bethe bloch formula for given p
        
   def res_range(p,mass,de_dx):
       E=np.sqrt(p**2+m**2)
       delE=np.diff(E)
       residual=[]
       for i in range(len(p)):
           integrand=np.trapz(1/np.array(de_dx[0:i])*delE[0:i])
           residual.append(integrand)
       return np.array(residual)                                    #return the residual range
       
   
       
   
        
           
        
